INTALAR : 
1.- descargar el  phpunit.phar  de la pagina oficial https://phar.phpunit.de/phpunit.phar
2.- copial este archivo a la altura del archivo php.exe
3.- probar que este bien instalado, en al consola tipear phpunit y debe salir un informe de comandos del phpunit

Configurar con el Zend 2 :
1.- para el caso de zend crear una carpeta llamada test debtro del modulo
2.- crear los archivos phpunit.xml, Boostrap.php y una carpeta donde vas a crear todos los test
3.- el archivo Boostrap.php debe ser de la forma
		<?php
		namespace JmapTest;
		use Zend\Loader\AutoloaderFactory;
		use Zend\Mvc\Service\ServiceManagerConfig;
		use Zend\ServiceManager\ServiceManager;
		use RuntimeException;
		error_reporting(E_ALL | E_STRICT);
		chdir(__DIR__);
		
		define('ENVIRONMENT', (get_cfg_var('APP_ENVIRONMENT'))? get_cfg_var('APP_ENVIRONMENT'):'');
		//define('ENVIRONMENT', 'development');
		
		if(ENVIRONMENT!=='development') {
		    exit('usar el etst en modo desarrollador');
		}
		
		/**
		 * Test bootstrap, for setting up autoloading
		 */
		class Bootstrap
		{
		    protected static $serviceManager;
		    public static function init()
		    {
		        $zf2ModulePaths = array(dirname(dirname(__DIR__)));
		        if (($path = static::findParentPath('vendor'))) {
		            $zf2ModulePaths[] = $path;
		        }
		        if (($path = static::findParentPath('module')) !== $zf2ModulePaths[0]) {
		            $zf2ModulePaths[] = $path;
		        }
		        static::initAutoloader();
		        // use ModuleManager to load this module and it's dependencies
		        $config = array(
		            'module_listener_options' => array(
		                'module_paths' => $zf2ModulePaths,
		            ),
		            'modules' => array(
		                'Jmap','Api'
		            )
		        );
		
		        $serviceManager = new ServiceManager(new ServiceManagerConfig());
		        $serviceManager->setService('ApplicationConfig', $config);
		        $serviceManager->get('ModuleManager')->loadModules();
		        static::$serviceManager = $serviceManager;
		    }
		
		    public static function chroot()
		    {
		        $rootPath = dirname(static::findParentPath('module'));
		        chdir($rootPath);
		    }
		    public static function getServiceManager()
		    {
		        return static::$serviceManager;
		    }
		    protected static function initAutoloader()
		    {
		        $vendorPath = static::findParentPath('vendor');
		        $zf2Path = getenv('ZF2_PATH');
		        if (!$zf2Path) {
		            if (defined('ZF2_PATH')) {
		                $zf2Path = ZF2_PATH;
		            } elseif (is_dir($vendorPath . '/ZF2/library')) {
		                $zf2Path = $vendorPath . '/ZF2/library';
		            } elseif (is_dir($vendorPath . '/zendframework')) {
		                // zf 2.5
		                $zf2Path = $vendorPath . '/zendframework';
		            }elseif (is_dir($vendorPath . '/zendframework/zendframework/library/zend')) {
		                // zf 2.4
		                $zf2Path = $vendorPath . '/zendframework/zendframework/library/zend';
		            }
		        }
		        if (!$zf2Path) {
		            throw new RuntimeException(
		                'Unable to load ZF2. Run `php composer.phar install` or'
		                . ' define a ZF2_PATH environment variable.'
		            );
		        }
		        if (file_exists($vendorPath . '/autoload.php')) {
		            include $vendorPath . '/autoload.php';
		        }
		        if (file_exists($zf2Path . '/zend-loader/src/AutoloaderFactory.php')) {
		            // zf 2.5
		            include $zf2Path . '/zend-loader/src/AutoloaderFactory.php';
		        }elseif (file_exists($zf2Path . '/Loader/AutoloaderFactory.php')) {
		            // zf 2.4
		            include $zf2Path . '/Loader/AutoloaderFactory.php';
		        }
		        AutoloaderFactory::factory(array(
		            'Zend\Loader\StandardAutoloader' => array(
		                'autoregister_zf' => true,
		                'namespaces' => array(
		                    __NAMESPACE__ => __DIR__ . '/' . __NAMESPACE__,
		                ),
		            ),
		        ));
		    }
		    protected static function findParentPath($path)
		    {
		        $dir = __DIR__;
		        $previousDir = '.';
		        while (!is_dir($dir . '/' . $path)) {
		            $dir = dirname($dir);
		            if ($previousDir === $dir) {
		                return false;
		            }
		            $previousDir = $dir;
		        }
		        return $dir . '/' . $path;
		    }
		}
		Bootstrap::init();
		Bootstrap::chroot(); 

4.- dentro de la carpeta que creaste genera unarchivo base.php
		<?php
		namespace JmapTest;
		use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;
		class Base extends AbstractHttpControllerTestCase
		{
		    protected $traceError = true;
		    
		
		    public function setUp()
		    {
		        $this->setApplicationConfig(
		            include(__DIR__."/../../../../config/application.config.php")
		        );
		        parent::setUp();
		        
		    }
		
		}
5.- ahora crea carpetas a la misma altura para agrupar tus test 
6.- el archivo phpunit.xml debe ser de la forma , se recominda trabajar  con testsuites 
	<?xml version="1.0" encoding="UTF-8"?>
	<phpunit bootstrap="Bootstrap.php" colors="true">
	    <testsuites>
	        <testsuite name="Jmap">
	            <directory>./JmapTest/Jmap</directory>
	        </testsuite>
	    </testsuites>
	    <testsuites>
	        <testsuite name="User">
	            <directory>./JmapTest/User</directory>
	        </testsuite>
	    </testsuites>
	</phpunit>
7.- la forma de hacer un test es abrir la terminar a la altura del archivo phpunit.xml y tipear
	phpunit  : para que se ejecuten todas las pruebas unitarias
	phpunit -- testsuite [nombredelatestsiut] : ejemplo phpunit -- testsuite User ; phpunit -- testsuite Jmap
	phpunit ruta_del_archivo.php : para ejecutar un test en particular
	phpunit --stop-on-failure : para que se detenga si encuentre un fracaso

	actualmente se esta usando este script para ejecutar las pruebas unitarias

	clear && phpunit --testsuit JmapRelation --stop-on-failure